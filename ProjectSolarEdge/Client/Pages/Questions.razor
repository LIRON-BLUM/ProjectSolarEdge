@page "/"
@using ProjectSolarEdge.Shared.Entities
@inject HttpClient httpClient
@using System.Net.Http.Json


<h3>Questions</h3>

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="NewQuestion">NewQuestion</MudButton>


<MudTable Items="QuestionsData" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")" ServerData="@(new Func<TableState, Task<TableData<Question>>>(ServerReload))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="ID_field" T="Question">ID</MudTableSortLabel></MudTh>
        <MudTh>Question Body</MudTh>
        <MudTh><MudTableSortLabel SortLabel="Type_field" T="Question">Type</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Difficulty_field" T="Question">Difficulty</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Creator_field" T="Question">Creator</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Creation_Date_field" T="Question">Creation Date</MudTableSortLabel></MudTh>
        <MudTh>Edit</MudTh>


        @*<MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.Number)">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.Sign)">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Element, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.Position)">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x=>x.Molar)">Mass</MudTableSortLabel></MudTh>*@
   
    </HeaderContent>
    <RowTemplate>
        <MudTh DataLabel="ID">@context.ID</MudTh>
        <MudTh DataLabel="Question Body">@context.QuestionBody</MudTh>
        <MudTh DataLabel="Type">@context.Type</MudTh>
        <MudTh DataLabel="Difficulty">@context.Difficulty</MudTh>
        <MudTh DataLabel="Creator">@context.Creator</MudTh>
        <MudTh DataLabel="Creation Date">@context.CreationDate</MudTh>
        <MudTh DataLabel="Edit">
            <a href="/EditQuestion/@context.ID">
                <MudButton Variant="Variant.Outlined"
                           EndIcon="@Icons.Filled.Edit"
                           Color="Color.Primary">

                    Edit
                </MudButton>
            </a>

        </MudTh>


    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{5,10,20}"></MudTablePager>
    </PagerContent>
</MudTable>



 @code {

     bool fixed_header = true;
     bool fixed_footer = false;

     //private string searchString = "";
     private string searchString = "";
     private int totalItems;
     private IEnumerable<Question> pagedData;
     private MudTable<Question> table;


     //private bool FilterFunc(Question question)

     private async Task<TableData<Question>> ServerReload(TableState state)
     {

         IEnumerable<Question> data = await QuestionsDataService.GetQuestionsAsync();
         await Task.Delay(300);
         data = data.Where(question =>

         {
             if (string.IsNullOrWhiteSpace(searchString))
                 return true;
             if (question.Creator.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                 return true;
             if (question.QuestionBody.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                 return true;
             if ($"{question.Difficulty} {question.Type} {question.UpdateDate}".Contains(searchString))
                 return true;
             return false;
         }).ToArray();
         totalItems = data.Count();
         switch (state.SortLabel)
         {
             case "ID_field":
                 data = data.OrderByDirection(state.SortDirection, o => o.ID);
                 break;
             case "Type_field":
                 data = data.OrderByDirection(state.SortDirection, o => o.Type);
                 break;
             case "Difficulty_field":
                 data = data.OrderByDirection(state.SortDirection, o => o.Difficulty);
                 break;
             case "Creator_field":
                 data = data.OrderByDirection(state.SortDirection, o => o.Creator);
                 break;
             case "Creation_Date_field":
                 data = data.OrderByDirection(state.SortDirection, o => o.CreationDate);
                 break;
         }

         pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
         return new TableData<Question>() { TotalItems = totalItems, Items = pagedData };

     }

     private void OnSearch(string text)
     {
         searchString = text;
         table.ReloadServerData();
     }

     }