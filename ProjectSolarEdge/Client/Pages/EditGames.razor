@page "/EditGame"
@page "/EditGame/{Id}"
@using ProjectSolarEdge.Shared.Entities
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@inject IDialogService DialogService
@*<link href="/css/bootstrap/bootstrap.min.css" rel="stylesheet" />*@


<MudGrid>
    <MudItem xs="12" class="d-flex gap-4">
        <MudItem xs="10" class="d-flex gap-4"><h1>Game Editor</h1></MudItem>
        <MudItem xs="2" class="d-flex gap-4  ">

            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddAndUpdate">Save</MudButton>
        </MudItem>
    </MudItem>


    <MudItem xs="7" class="gap-4">
        <MudItem xs="12" id="GameName" class="d-flex gap-4 ma-2" Width="100%" Height="auto">
            <MudItem xs="6" id="GameName" Width="100%" Height="auto">
                <MudTextField Class="ma-2" T="string" Label="Game Name" Variant="Variant.Outlined" @bind-Value="@GameCRUD.GameName" />
                <MudTextField Class="ma-2" @bind-Value="@GameCRUD.GameDescription" Label="Game Description" Variant="Variant.Outlined" Margin="Margin.Dense" Counter="25" MaxLength="25" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"></MudTextField>
            </MudItem>
            <MudItem xs="6" id="GameDateAndTime" Width="100%" Height="auto">
                <MudDatePicker Class="ma-2" Label="Editable with Placeholder" Editable="true" DateFormat="dd/MM/yyyy" @bind-Date="startdate" Placeholder="Select Date" />
                <MudDatePicker Class="ma-2" Label="Editable with Placeholder" Editable="true" DateFormat="dd/MM/yyyy" @bind-Date="enddate" Placeholder="Select Date" />
                @*<MudNumericField Class="ma-2" @bind-Value="@GameCRUD.GameTimeLimit" Label="Enter an int" Variant="Variant.Outlined" />*@
            </MudItem>
        </MudItem>

        <MudItem xs="12" id="ScoreMethodAndGamification" class="d-flex gap-4 ma-2" Width="100%" Height="auto">

            <MudItem xs="6" id="ScoreMethodContainer" Width="100%" Height="auto">
                <MudText Typo="Typo.h6">How Would you like to spred the points between the game questions?</MudText>

                <MudItem xs="12" id="ScoreMethod" class="d-flex gap-4 ma-2" Width="100%" Height="auto">

                    <MudItem xs="6" id="ScoreMethodChoose" class="d-flex gap-4 ma-2 flex-column" Width="100%" Height="auto">
                        <MudRadioGroup @bind-SelectedOption="@GameCRUD.ScoreMethod" class="d-flex flex-column">
                            <MudRadio Color="Color.Primary" Option="@(ScoreMethod.SpreadEqualy)" UnCheckedColor="Color.Default">Spread Equaly</MudRadio>
                            <MudRadio Color="Color.Primary" Option="@(ScoreMethod.SpreadByDifficulty)" UnCheckedColor="Color.Default">Spread By Difficulty</MudRadio>
                            <MudRadio Color="Color.Primary" Option="@(ScoreMethod.SeldSpread)" UnCheckedColor="Color.Default">I’ll Do It Myself</MudRadio>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="6" id="ScoreSpread" class="d-flex gap-4 ma-2 flex-column" Width="100%" Height="auto">
                        <MudNumericField @bind-Value="@GameCRUD.ScoreEasy" Label="Easy" Variant="Variant.Text" Min="0" Step="100" Max="1000" />
                        <MudNumericField @bind-Value="@GameCRUD.ScoreMedium" Label="Medium" Variant="Variant.Text" Min="0" Step="100" Max="1000" />
                        <MudNumericField @bind-Value="@GameCRUD.ScoreHard" Label="Hard" Variant="Variant.Text" Min="0" Step="100" Max="1000" />

                    </MudItem>
                </MudItem>
            </MudItem>

            <MudItem xs="6" class="d-flex gap-4 ma-2 flex-column" id="GamificationAndIteration" Width="100%" Height="auto">
                <MudItem xs="12" class="d-flex gap-4 " id="GamificationContainer" Width="100%" Height="auto">
                    <MudItem xs="7" id="GamificationQuestion" Width="100%" Height="auto">
                        <MudText>Include Gambling Fanction?</MudText>
                    </MudItem>
                    <MudItem xs="5" id="GamificationYesNo" Width="100%" Height="auto">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"  @onclick="GamificationTrue">Yes</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="GamificationFalse">No</MudButton>
                    </MudItem>
                </MudItem>
                <MudItem xs="12" id="IterationContainer" class="d-flex gap-4 " Width="100%" Height="auto">
                    <MudItem xs="6" id="IterWheelTitle" class="d-flex gap-4 " Width="100%" Height="auto">
                        <MudText>Wheel of Fortune every</MudText>

                    </MudItem>
                    <MudItem xs="3" id="IterWheelNum" Width="100%" Height="auto">
                        <MudNumericField @bind-Value="@GameCRUD.WheelIteration" Label="" Variant="Variant.Text" Min="0" Max="10" />


                    </MudItem>
                    <MudItem xs="3" id="IterWheelQ" Width="100%" Height="auto">
                        <MudText>Questions</MudText>

                    </MudItem>
                </MudItem>

              @*  <MudItem xs="12" id="GambleContainer" class="d-flex gap-4 " Width="100%" Height="auto">
                    <MudItem xs="6" id="GambleTitle" class="d-flex gap-4 " Width="100%" Height="auto">

                        <MudText>Gamble points every</MudText>
                    </MudItem>
                    <MudItem xs="3" id="GambleNum" Width="100%" Height="auto">

                        <MudNumericField @bind-Value="@GameCRUD.GambleIteration" Label="Hard" Variant="Variant.Text" Min="0" Max="10" />

                    </MudItem>
                    <MudItem xs="3" id="GambleQ" Width="100%" Height="auto">

                        <MudText>Questions</MudText>
                    </MudItem>
                </MudItem>*@

            </MudItem>
        </MudItem>








    </MudItem>


    <MudItem xs="5" class="d-inline-flex flex-column  gap-4">

        @*<MudPaper Class="mud-theme-secondary" Width="100%" Height="320px" Elevation="0">*@
        <MudTable Items="GameCRUD.Questions" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")">
            <HeaderContent>
                <MudTh>Type</MudTh>
                <MudTh>Question</MudTh>
                <MudTh>Delete</MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Type">@context.Type</MudTd>
                <MudTd DataLabel="Question">@context.QuestionBody <br /> <MudChip>@context.Difficulty</MudChip>  <MudChip>@context.UpdateDate</MudChip> </MudTd>
                <MudTd DataLabel="Delete">

                    <MudTooltip Text="Delete Question">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="(() =>DeleteQuestionFromGame(context.ID))" Color="Color.Primary" />


                    </MudTooltip>
                </MudTd>

            </RowTemplate>
        </MudTable>
        <MudButton @onclick="(() =>OpenDialog(GameCRUD.ID))" Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
            @*<MudButton @onclick="@OpenDialog" Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">*@
                Add Questions
            </MudButton>


    </MudItem>



</MudGrid>









@code {

    public string ReadOnly { get; set; } = "Can't change me";
    string sampleText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
    public int IntValue { get; set; }

    public int ScoreEasy { get; set; }
    public int ScoreMedium { get; set; }
    public int ScoreHard { get; set; }

  

    MudMessageBox mbox { get; set; }
    string state = "Message box hasn't been opened yet";

    private async void OnButtonClicked()
    {
        bool? result = await mbox.Show();
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();
    }



    bool mandatory = true;
    MudChip selected;





    DateTime? startdate = DateTime.Today;

    DateTime? enddate = DateTime.Today;




    //public bool Dense_Radio { get; set; } = true;

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "Max 25 characters";
    }

    //IList<IBrowserFile> files = new List<IBrowserFile>();
    //private void UploadFiles(InputFileChangeEventArgs e)
    //{
    //    foreach (var file in e.GetMultipleFiles())
    //    {
    //        //var file = inputFileChangeEvent.File;


    //        files.Add(file);
    //        var fileInArray = new byte[file.Size];
    //        await file.OpenReadStream(1512000).ReadAsync(fileInArray);

    //        filePicDataUrl = $"data:image/png;base64,{Convert.ToBase64String(fileInArray)}";


    //    }
    //TODO upload the files to the server



}






