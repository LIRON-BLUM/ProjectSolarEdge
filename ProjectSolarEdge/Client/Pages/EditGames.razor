@page "/EditGame"
@page "/EditGame/{Id}"
@using ProjectSolarEdge.Shared.Entities
@using System.Net.Http.Json
@inject HttpClient httpClient

<h3>EditGame @GameCRUD.ID </h3>


<MudGrid>

    <MudItem xs="8" class="d-flex gap-4  ">

        <MudPaper xs="5" Class="d-flex flex-column flex-grow-1  gap-x-8 gap-y-4 " Elevation="0">
            
                <EditForm Model="@GameCRUD">
                    <MudTextField Class="ma-2" T="string" Label="Game Name" Variant="Variant.Outlined" @bind-Value="@GameCRUD.GameName" Lines="4" />
                    <MudTextField Class="ma-2" @bind-Value="@GameCRUD.GameDescription" Label="Game Description" Variant="Variant.Outlined" Margin="Margin.Dense" Counter="25" MaxLength="25" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"></MudTextField>
                    <MudDatePicker Class="ma-2" Label="Editable with Placeholder" Editable="true" DateFormat="dd/MM/yyyy" @bind-Date="startdate" Placeholder="Select Date" />
                    <MudDatePicker Class="ma-2" Label="Editable with Placeholder" Editable="true" DateFormat="dd/MM/yyyy" @bind-Date="enddate" Placeholder="Select Date" />
                    <MudNumericField Class="ma-2" @bind-Value="@GameCRUD.GameTimeLimit" Label="Enter an int" Variant="Variant.Outlined" />
                    <MudButton Class="m-2" Variant="Variant.Filled" @onclick="SaveGame" Color="Color.Primary" DisableElevation="true">Save</MudButton>

                </EditForm>
         
        </MudPaper>


        <MudPaper xs="3" Class="d-flex flex-column flex-grow-1 gap-x-8 gap-y-4" Elevation="0">
            <MudPaper Class=" ma-2 mud-theme-primary" Width="100%" Height="64px" />
            <MudPaper Class="ma-2 mud-theme-primary" Width="100%" Height="64px" />
            <MudPaper Class="ma-2 mud-theme-primary" Width="100%" Height="64px" />
            <MudPaper Class="ma-2 mud-theme-primary" Width="100%" Height="64px" />
        </MudPaper>


    </MudItem>

    <MudItem xs="4" class="d-inline-flex gap-4 ">
        <MudPaper Class="d-flex flex-column flex-grow-1  gap-y-4" Elevation="0">
            <MudTable Items="GameCRUD.Questions" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")">
                <HeaderContent>
                    <MudTh>Type</MudTh>
                    <MudTh>Question</MudTh>
                    <MudTh>Delete</MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Type">@context.Type</MudTd>
                    <MudTd DataLabel="Question">@context.QuestionBody <br /> <MudChip>@context.Difficulty</MudChip>  <MudChip>@context.UpdateDate</MudChip> </MudTd>
                    <MudTd DataLabel="Delete">

                        <MudTooltip Text="Delete Question">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" />
                            @*<MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="(() =>QuestionsToDeleteID(context.ID))" Color="Color.Primary" />*@

                        </MudTooltip>
                    </MudTd>

                </RowTemplate>
            </MudTable>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" DisableElevation="true" OnClick="@ToggleOpen">@(_isOpen? "Close" : "Add Question")</MudButton>
            <MudPopover Open="_isOpen" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterLeft" Paper="false">
                <MudPaper Outlined="true" Class="object-contain">
                    <MudItem>
                        <MudTable Items="Elements" MultiSelection="true" @bind-SelectedItems="selectedQuestions" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")">
                            <HeaderContent>
                                <MudTh>Type</MudTh>
                                <MudTh>Question</MudTh>


                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Type">@context.Type</MudTd>
                                <MudTd DataLabel="Question">@context.QuestionBody <br /> <MudChip>@context.Difficulty</MudChip>  <MudChip>@context.UpdateDate</MudChip> </MudTd>


                            </RowTemplate>
                        </MudTable>
                    </MudItem>

                </MudPaper>
            </MudPopover>

        </MudPaper>
    </MudItem>
</MudGrid>





<!--<MudGrid Spacing=3>
    <MudPaper xs="7" Class="flex-shrink-1 py-8 mud-theme-primary" Width="70%" Elevation="0">

        <MudItem xs="12" sm="7">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                <EditForm Model="@GameCRUD">


                    <MudItem xs="6">
                        <MudTextField T="string" Label="Game Name" Variant="Variant.Outlined" @bind-Value="@GameCRUD.GameName" Lines="4" />

                    </MudItem>


                    <MudItem xs="6">
                        <MudTextField @bind-Value="@GameCRUD.GameDescription" Label="Game Description" Variant="Variant.Outlined" Margin="Margin.Dense" Counter="25" MaxLength="25" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"></MudTextField>
                    </MudItem>

                    <MudItem xs="6">
                        <MudDatePicker Label="Editable with Placeholder" Editable="true" DateFormat="dd/MM/yyyy" @bind-Date="startdate" Placeholder="Select Date" />
                    </MudItem>

                    <MudItem>

                        <MudDatePicker Label="Editable with Placeholder" Editable="true" DateFormat="dd/MM/yyyy" @bind-Date="enddate" Placeholder="Select Date" />

                    </MudItem>

                    <MudNumericField @bind-Value="@GameCRUD.GameTimeLimit" Label="Enter an int" Variant="Variant.Outlined" />


                    <MudButton Variant="Variant.Filled" @onclick="SaveGame" Color="Color.Primary" DisableElevation="true">Save</MudButton>


                </EditForm>




            </MudPaper>
        </MudItem>

    </MudPaper>




    <MudPaper xs="5" Class="flex-shrink-1 py-8  mud-theme-primary" Width="30%" Elevation="0">

        <MudItem xs="12" sm="5">
            <MudPaper Class="d-flex flex-column flex-grow-1 gap-4 ">-->
                @*<MudTable Items="QuestionsData" MultiSelection="true" @bind-SelectedItems="selectedQuestions" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")">*@

                <!--<MudTable Items="GameCRUD.Questions" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")">
                    <HeaderContent>
                        <MudTh>Type</MudTh>
                        <MudTh>Question</MudTh>
                        <MudTh>Delete</MudTh>

                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Type">@context.Type</MudTd>
                        <MudTd DataLabel="Question">@context.QuestionBody <br /> <MudChip>@context.Difficulty</MudChip>  <MudChip>@context.UpdateDate</MudChip> </MudTd>
                        <MudTd DataLabel="Delete">

                            <MudTooltip Text="Delete Question">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" />-->
                                @*<MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="(() =>QuestionsToDeleteID(context.ID))" Color="Color.Primary" />*@

                            <!--</MudTooltip>
                        </MudTd>

                    </RowTemplate>
                </MudTable>

                <MudButton Variant="Variant.Filled" Color="Color.Primary"  FullWidth="true" DisableElevation="true" OnClick="@ToggleOpen">@(_isOpen? "Close" : "Add Question")</MudButton>
                <MudPopover Open="_isOpen" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.CenterLeft" Paper="false">
                    <MudPaper Outlined="true" Class="object-contain">
                        <MudItem>
                            <MudTable Items="Elements" MultiSelection="true" @bind-SelectedItems="selectedQuestions" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")">
                                <HeaderContent>
                                    <MudTh>Type</MudTh>
                                    <MudTh>Question</MudTh>


                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Type">@context.Type</MudTd>
                                    <MudTd DataLabel="Question">@context.QuestionBody <br /> <MudChip>@context.Difficulty</MudChip>  <MudChip>@context.UpdateDate</MudChip> </MudTd>


                                </RowTemplate>
                            </MudTable>
                        </MudItem>

                    </MudPaper>
                </MudPopover>


            </MudPaper>
        </MudItem>
    </MudPaper>
</MudGrid>-->






@code {

    MudMessageBox mbox { get; set; }
    string state = "Message box hasn't been opened yet";

    private async void OnButtonClicked()
    {
        bool? result = await mbox.Show();
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();
    }







    DateTime? startdate = DateTime.Today;

    DateTime? enddate = DateTime.Today;




    //public bool Dense_Radio { get; set; } = true;

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "Max 25 characters";
    }

    //IList<IBrowserFile> files = new List<IBrowserFile>();
    //private void UploadFiles(InputFileChangeEventArgs e)
    //{
    //    foreach (var file in e.GetMultipleFiles())
    //    {
    //        //var file = inputFileChangeEvent.File;


    //        files.Add(file);
    //        var fileInArray = new byte[file.Size];
    //        await file.OpenReadStream(1512000).ReadAsync(fileInArray);

    //        filePicDataUrl = $"data:image/png;base64,{Convert.ToBase64String(fileInArray)}";


    //    }
    //TODO upload the files to the server



}






