@page "/EditQuestion"
@page "/EditQuestion/{Id}"
@using ProjectSolarEdge.Shared.Entities
@using System.Net.Http.Json
@inject HttpClient httpClient
@using Microsoft.AspNetCore.Components.Web.Virtualization
<link href="/css/bootstrap/bootstrap.min.css" rel="stylesheet" />

<h3>Edit Question @QuestionsCRUD.ID </h3>

<MudGrid Spacing=3>
    <MudItem xs="12" sm="7">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <EditForm Model="@QuestionsCRUD">


                <MudItem xs="8">
                    <MudTextField T="string" Label="Question Body" Variant="Variant.Outlined" @bind-Value="@QuestionsCRUD.QuestionBody" Lines="4" />

                </MudItem>

                <MudItem xs="4">
                    @*<InputFile OnChange="@OnInputFileChanged"></InputFile>*@
                    <InputFile id="fileInput" OnChange="UploadFile" hidden />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.Image"
                               for="fileInput">
                        Upload Image
                    </MudButton>
                    <img src="@myFileImage" style="width:250px; height:auto;" />
                    <img src="@filePicDataUrl" style="width:250px; height:auto;" />

                    @if (files != null)
                    {
                        <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                        <MudList>
                            @foreach (var file in files)
                            {
                                <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="@QuestionsCRUD.Creator" Label="Enter Your Name" Variant="Variant.Outlined" Margin="Margin.Dense" Counter="25" MaxLength="25" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"></MudTextField>
                </MudItem>

                <MudItem xs="6">

                </MudItem>


                <div>
                    <MudRadioGroup @bind-SelectedOption="@CheckedAnswerID">
                        @foreach (var myanswer in QuestionsCRUD.Answers)
                        {
                            <MudRadio Option="@myanswer.ID" Color="Color.Primary" Dense="true"> <InputText @bind-Value="@myanswer.AnswerBody" placeholder="Enter Your answer"></InputText></MudRadio>
                            <br />
                            <br />
                        }
                    </MudRadioGroup>
                </div>

                <div>
                    <div class="input-group">
                        @foreach (var myanswer in QuestionsCRUD.Answers)
                        {
                            <div class="input-group-text">

                                <input class="form-check-input mt-0" type="radio" value="@CheckedAnswerID" aria-label="Radio button for following text input">

                            </div>
                            <input type="text" class="form-control" value="@myanswer.AnswerBody" aria-label="Text input with radio button">
                        }
                    </div>
                </div>

                <div>
                    <label for="QuestionFeedback">Feedback:</label><br />
                    <InputTextArea id="QuestionFeedback" @bind-Value="@QuestionsCRUD.Feedback" placeholder="Enter Your Feedback"></InputTextArea><br /><br />
                </div>

                <div>
                    <MudSelect Dense="true" T="QuestionDifficulty" Label="Difficulty" Variant="Variant.Outlined" @bind-Value="@QuestionsCRUD.Difficulty">
                        <MudSelectItem Value="@(QuestionDifficulty.Easy)" />
                        <MudSelectItem Value="@(QuestionDifficulty.Medium)" />
                        <MudSelectItem Value="@(QuestionDifficulty.Hard)" />
                    </MudSelect>
                </div>
                <br />


                <div>
                    <MudSelect T="string" Label="Subjects" MultiSelection="true" @bind-Value="DefaultValue" @bind-SelectedValues="SelectedSubjects">
                        @foreach (var subject in SubjectsData)
                        {
                            <MudSelectItem T="string" Value="@subject.SubjectName">@subject.SubjectName</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <br />
                <div>

                    <MudTextField @bind-Value="@OneSubject.SubjectName" Label="Subject Name" Variant="Variant.Outlined" Margin="Margin.Dense" Counter="25" MaxLength="25" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"></MudTextField>

                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" @onclick="AddSubject" Class="justify-content-end">Add Subject</MudButton>

                </div>
                <br />
                <br />
                <br />






                <div>
                    <MudButton Variant="Variant.Filled" @onclick="AddAndUpdate" Color="Color.Primary" DisableElevation="true">Save</MudButton>
                    <MudButton Variant="Variant.Filled" @onclick="DeleteQuestion" Color="Color.Primary" DisableElevation="true">Delete Question</MudButton>
                </div>


            </EditForm>




        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="5">
        <MudItem>
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Immediate="false" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 d-flex align-center justify-start mud-width-full py-2"></MudTextField>
        </MudItem>
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">

            <MudTable Items="QuestionsDataToDisplay" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")" ServerData="@(new Func<TableState, Task<TableData<Question>>>(ServerReload))">
                <HeaderContent>
                    <MudTh>Type</MudTh>
                    <MudTh>Question</MudTh>
                    <MudTh>Delete</MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Type">@context.Type</MudTd>
                    <MudTd DataLabel="Question">@context.QuestionBody <br /> <MudChip>@context.Difficulty</MudChip>  <MudChip>@context.UpdateDate</MudChip> </MudTd>
                    <MudTd DataLabel="Delete">

                        <MudTooltip Text="Delete Question">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="(() =>QuestionsToDeleteID(context.ID))" Color="Color.Primary" />
                        </MudTooltip>
                    </MudTd>

                </RowTemplate>
            </MudTable>

        </MudPaper>
    </MudItem>

</MudGrid>




@code {
    public bool Dense_Radio { get; set; } = true;

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "Max 25 characters";
    }

    //IList<IBrowserFile> files = new List<IBrowserFile>();
    //private void UploadFiles(InputFileChangeEventArgs e)
    //{
    //    foreach (var file in e.GetMultipleFiles())
    //    {
    //        //var file = inputFileChangeEvent.File;


    //        files.Add(file);
    //        var fileInArray = new byte[file.Size];
    //        await file.OpenReadStream(1512000).ReadAsync(fileInArray);

    //        filePicDataUrl = $"data:image/png;base64,{Convert.ToBase64String(fileInArray)}";


    //    }
    //TODO upload the files to the server

    string myFileImage;
    long maxFileSize = 4194304;

    private async Task UploadFile(InputFileChangeEventArgs e) {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles) {
            if (file.Size <= maxFileSize) {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/QuestionsController/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode == true) {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    myFileImage = resizeUrl;
                    Console.WriteLine(resizeUrl);
             	   }
	     }
 	}
   }


}






